package com.assessment.ekos.security;import com.assessment.ekos.service.UserService;import jakarta.servlet.FilterChain;import jakarta.servlet.ServletException;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import lombok.RequiredArgsConstructor;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;import org.springframework.util.StringUtils;import org.springframework.web.filter.OncePerRequestFilter;import java.io.IOException;@RequiredArgsConstructorpublic class AuthTokenFilter extends OncePerRequestFilter {    private static final Logger logger = LoggerFactory.getLogger(AuthTokenFilter.class);    private final UserService userService;    private final JwtUtil jwtUtil;    @Override    protected void doFilterInternal(            HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)            throws ServletException, IOException {        try {            String jwt = parseJwt(request);            if (jwt != null && jwtUtil.validateJwtToken(jwt)) {                String email = jwtUtil.getEmailFromJwtToken(jwt);                UserDetails userDetails = userService.loadUserByEmail(email);                UsernamePasswordAuthenticationToken authentication =                        new UsernamePasswordAuthenticationToken(                                userDetails, null, userDetails.getAuthorities());                authentication.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));                SecurityContextHolder.getContext().setAuthentication(authentication);            }        } catch (Exception e) {            logger.warn("Cannot set user authentication: {} and request received {}", e, request);        }        filterChain.doFilter(request, response);    }    private String parseJwt(HttpServletRequest request) {        String headerAuth = request.getHeader("Authorization");        if (StringUtils.hasText(headerAuth) && headerAuth.startsWith("Bearer ")) {            return headerAuth.substring(7);        }        throw new SecurityException("authorization token could not be found");    }}