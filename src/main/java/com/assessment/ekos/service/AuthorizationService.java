package com.assessment.ekos.service;import com.assessment.ekos.dto.UserDto;import com.assessment.ekos.mapper.UserMapper;import com.assessment.ekos.model.User;import com.assessment.ekos.repository.UserRepository;import com.assessment.ekos.security.SecurityConstants;import io.jsonwebtoken.Jwts;import io.jsonwebtoken.SignatureAlgorithm;import lombok.RequiredArgsConstructor;import org.springframework.security.core.Authentication;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.stereotype.Service;import java.util.Date;import java.util.HashSet;import java.util.concurrent.TimeUnit;import java.util.stream.Collectors;@Service@RequiredArgsConstructorpublic class AuthorizationService {    private static final int TIME_LIMIT_AS_HOUR = 12;    private final UserRepository userRepository;    private final UserMapper userMapper;    public UserDto getCurrentUser() {        var userId = getCurrentUserId();        if (userId == null) return null;        var userEntity = userRepository.findById(Long.parseLong(userId));        if (userEntity.isPresent()) {            return userMapper.toDto(userEntity.get());        }        return null;    }    public String getCurrentUserId() {        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();        if (authentication == null || authentication.getPrincipal().equals("anonymousUser"))            return null;        return authentication.getPrincipal().toString();    }    public String getJWTToken(User user) {        var privileges = new HashSet<String>();        user.getRoleList().stream()                .forEach(                        role -> {                            privileges.add(role.getName());                            var toAdd =                                    role.getAuthorities().stream().map(a -> a.getName()).collect(Collectors.toSet());                            privileges.addAll(toAdd);                        });        var roles = user.getRoleList().stream().map(o -> o.getName()).collect(Collectors.toSet());        return Jwts.builder()//                .setId(user.getResetKey())                .setSubject(user.getId().toString())                .claim("authorities", privileges)                .claim("roles", roles)                .claim("email", user.getEmail())                .claim("name", user.getFirstName())                .claim("surname", user.getLastName())                .setIssuedAt(new Date(System.currentTimeMillis()))                .setExpiration(                        new Date(System.currentTimeMillis() + TimeUnit.HOURS.toMillis(TIME_LIMIT_AS_HOUR)))                .signWith(SignatureAlgorithm.HS512, SecurityConstants.SECRET)                .compact();    }}