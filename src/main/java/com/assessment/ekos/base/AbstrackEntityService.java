package com.assessment.ekos.base;import com.assessment.ekos.model.User;import com.assessment.ekos.repository.UserRepository;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Pageable;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.transaction.annotation.Transactional;import java.io.Serializable;import java.util.List;import java.util.Optional;public abstract class AbstractEntityService<T extends BaseEntity, PK extends Serializable> {    public abstract BaseRepository<T, PK> getRepository();    private static final Logger LOGGER = LoggerFactory.getLogger(AbstractEntityService.class);    @Autowired    private UserRepository userRepository;    protected T verifySave(T entity) {        return entity;    }    protected T verifyPut(T theReal, T forSave) {        return forSave;    }    protected T verifyDelete(T entity) {        return entity;    }    @Transactional    public T save(T entity) {        verifySave(entity);        return getRepository().save(entity);    }    public User getCurrentUser() {        var id =                Long.parseLong(                        SecurityContextHolder.getContext().getAuthentication().getPrincipal().toString());        var user = userRepository.findById(id).get();        return user;    }    @Transactional    public T put(PK id, T forSave) {        T theReal = getEntity(id);        forSave.setId(theReal.getId());        verifyPut(theReal, forSave);        return getRepository().save(forSave);    }    @Transactional    public void delete(PK id) {        T entity = getEntity(id);        verifyDelete(entity);        getRepository().delete(entity);    }    public T getEntity(PK id) {        Optional<T> entity = getRepository().findById(id);        if (entity.isPresent()) {            return entity.get();        }        return null;    }}